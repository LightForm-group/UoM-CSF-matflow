- name: get_model_texture
  outputs:
    - ODF
  inputs:
    - crystal_symmetry
    - specimen_symmetry
  methods:
    - name: unimodal
      inputs: 
        - modal_orientation_hkl
        - modal_orientation_uvw
        - halfwidth
      implementations:
        - name: mtex
          commands:
            - command: <<executable>>
              options:
                - [crystal_symmetry]
                - [specimen_symmetry]
                - [modal_orientation_hkl]
                - [modal_orientation_uvw]
                - [halfwidth]
          output_map:
            - files: 
              - name: ODF.txt
                save: true
              output: ODF
    - name: fibre
      inputs:
        - halfwidth
      implementations:
        - name: mtex
          commands:
            - command: <<executable>>
              options:
                - [crystal_symmetry]
                - [specimen_symmetry]
                - [halfwidth]
          output_map:
            - files: 
              - name: ODF.txt
                save: true
              output: ODF
    - name: random
      inputs:
        - num_orientations
      implementations:
        - name: mtex
          commands:
            - command: <<executable>>
              options:
                - [crystal_symmetry]
                - [specimen_symmetry]
                - [num_orientations]
          output_map:
            - files: 
              - name: ODF.txt
                save: true
              output: ODF                

- name: estimate_ODF
  outputs:
    - ODF
  methods:
    - name: from_CTF_file
      inputs: 
        - CTF_file_path[file=True]
        - specimen_symmetry
        - phase
      implementations:
        - name: mtex
          commands:
            - command: <<executable>>
              options:
                - [CTF_file_path]
                - [specimen_symmetry]                
                - [phase]
          output_map:
            - files:
                - name: ODF.txt
                  save: true
              output: ODF
    - name: from_CRC_file
      inputs: 
        - CRC_file_path[file=True]
        - CPR_file_path[file=True]
        - specimen_symmetry
        - phase
      implementations:
        - name: mtex
          commands:
            - command: <<executable>>
              options:
                - [CRC_file_path]
                - [specimen_symmetry]                
                - [phase]
          output_map:
            - files:
                - name: ODF.txt
                  save: true
              output: ODF               
            
- name: sample_texture
  inputs:
    - num_orientations
  outputs:
    - orientations
  methods:
    - name: from_ODF
      inputs:
        - ODF
      implementations:
        - name: mtex
          inputs:
            - crystal_symmetry
            - specimen_symmetry        
          input_map:
            - inputs:
                - ODF
              file: ODF.txt
          commands:
            - command: <<executable>>
              options:
                - [crystal_symmetry]
                - [specimen_symmetry]
                - [num_orientations]
          output_map:
            - files:
                - name: orientations.txt
                  save: true
              output: orientations
        
- name: generate_microstructure_seeds
  outputs:
    - microstructure_seeds
  methods:
    - name: random    
      inputs:
        - grid_size
        - num_grains          
      implementations:
        - name: damask
          outputs:
            - microstructure_seeds
          commands:
            - command: seeds_fromRandom
              stdout: positions.txt
              stderr: stderr.log
              options: 
                - [-N, num_grains]
                - [-g, grid_size]       
          output_map:
            - files: 
                - name: positions.txt
                  save: true
              output: microstructure_seeds

- name: load_microstructure
  outputs:
    - microstructure_image
  methods:
    - name: EBSD+DIC
      inputs:
        - DIC
        - EBSD
        - transform_type
        - root_path
      implementations:
        - name: DefDAP
          input_map:
            - inputs:
              - DIC
              - EBSD
              - transform_type
              - root_path
              file: inputs.hdf5
              save: false
          commands:
            - command: <<executable>> inputs.hdf5
          output_map:
            - files:
                - name: outputs.hdf5
                  save: false
              output: microstructure_image  

- name: generate_volume_element
  outputs:
    - volume_element
  methods:
    - name: extrusion
      inputs:
        - microstructure_image
        - depth    
      implementations:
        - name: damask
          inputs:
            - microstructure_image
            - depth  
    - name: random_voronoi
      notes: >
        In this method we use the random orientations that already exist in
        microstructure_seeds.
      inputs:
        - microstructure_seeds
        - size
      implementations:
        - name: damask
          inputs:
            - rescale_size
            - rescale_grid
          input_map:
            - inputs:
                - microstructure_seeds
              file: orientation.seeds
          output_map:
            - files:
                - name: volume_element.geom
                  save: true
              output: volume_element
          commands:
            - command: geom_fromVoronoiTessellation
              stdin: orientation.seeds
              stdout: volume_element_initial.geom 
              stderr: stderr.log
              options:
                - [-s, size]
            - command: geom_rescale
              stdin: volume_element_initial.geom
              stdout: volume_element.geom
              stderr: stderr.log
              options:
                - [-g, rescale_grid]
                - [-s, rescale_size]

    - name: random_voronoi_from_orientations      
      notes: >
        In this method we replace the orientations in microstructure_seeds
        with orientations computed from a previous task.        
      inputs:
        - microstructure_seeds
        - orientations
        - size
      implementations:
        - name: damask
          inputs:
            - rescale_size
            - rescale_grid
          input_map:
            - inputs:
                - microstructure_seeds
                - orientations
              file: orientation.seeds
          output_map:
            - files:
                - name: volume_element.geom
                  save: true
              output: volume_element
          commands:
            - command: geom_fromVoronoiTessellation
              stdin: orientation.seeds
              stdout: volume_element_initial.geom 
              stderr: stderr.log
              options:
                - [-s, size]
            - command: geom_rescale
              stdin: volume_element_initial.geom
              stdout: volume_element.geom
              stderr: stderr.log
              options:
                - [-g, rescale_grid]
                - [-s, rescale_size]

- name: visualise_volume_element
  inputs:
    - volume_element
  methods:
    - name: VTK
      outputs:
        - __file__VTR_file
      implementations:
        - name: damask
          input_map: 
            - inputs:
                - volume_element
              file: geom.geom
          commands:
            - command: geom_check
              parameters: [geom.geom]
              stderr: stderr.log

- name: visualise_volume_element_response
  inputs:
    - volume_element_response
  methods:
    - name: VTK
      outputs:
        - __file__VTR_file
      implementations:
        - name: damask
          input_map: 
            - inputs:
                - volume_element_response
              file: geom.geom
          commands:
            - command: geom_check
              parameters: [geom.geom]
              stderr: stderr.log

- name: generate_load_case
  inputs:
    - total_times
    - num_increments
    - target_strains
  methods:
    - name: uniaxial      
      implementations:
        - name: formable
          inputs:
            - target_strain_rates
            - rotations            
            - directions # x, y or z
    - name: biaxial
      implementations:
        - name: formable
          inputs:
            - target_strain_rates              
            - directions # xy, xz or yz        
    - name: plane_strain
      implementations:
        - name: formable
          inputs:
            - target_strain_rates              
            - directions # xy, xz or yz
    - name: random_2D
      implementations:      
        - name: formable
          inputs:
            - target_strain_rates                  
            - normal_directions # x, y, or z (i.e. load in yz, xz or xy planes)
    - name: random_3D
      implementations:
        - name: formable
          inputs:              
            - rotation
            - rotation_max_angle
            - rotation_load_case
            - non_random_rotation      
  outputs:
    - load_case

- name: simulate_volume_element_loading
  inputs: 
    - volume_element
    - material_properties
    - load_case
  outputs:
    - volume_element_response      
  methods:
    - name: CP_FFT
      implementations:
        - name: damask
          input_map:
            - inputs:
                - material_properties
                - volume_element
              file: material.config
            - inputs:
                - volume_element
              file: geom.geom
            - inputs:
                - load_case
              file: load.load
          commands:
            - command: <<executable>>
              parallel_mode: MPI
              options:
                - [--load, load.load]
                - [--geom, geom.geom]
              stdout: stdout.log
              stderr: stderr.log
          output_map:
            - files: 
                - name: geom_load.hdf5
                  save: false
              output: volume_element_response
              options:
                required: [incremental_data]
                optional: [operations]
          archive_excludes: ['geom_load.hdf5', '*.spectralOut']

- name: fit_yield_function
  outputs:
    - fitted_yield_functions
  methods:
    - name: formable
      implementations:
        - name: formable
          inputs:
            - yield_function_name
            - yield_point_criteria                        
            - volume_element_response[context=uniaxial,alias=uniaxial_response]
            - volume_element_response[context=multiaxial,alias=multiaxial_responses,group=multiaxial_responses]

- name: dummy_task_1
  outputs:
    - parameter_2
  methods:
    - name: method_1
      inputs:
        - parameter_1
      implementations:
        - name: dummy_software
          input_map:
            - inputs:
                - parameter_1
              file: t1_m1_infile_1
          output_map:
            - files:
                - name: outfile.txt
                  save: true
              output: parameter_2
          commands:
            - command: <<executable>>
              options:
                - [--infile1, t1_m1_infile_1]
                - [--infile2, t1_m1_infile_1]
                - [--value, parameter_1]

- name: dummy_task_2
  outputs:
    - parameter_4
  methods:
    - name: method_1
      inputs:
        - parameter_2
        - parameter_3
      implementations:
        - name: dummy_software
          input_map:
            - inputs:
                - parameter_2
                - parameter_3
              file: t2_m1_infile_1
          output_map:
            - files:
                - name: outfile.txt
                  save: true
              output: parameter_4                
          commands:
            - command: hpcflow dummy doSomething
              options:
                - [--infile1, t2_m1_infile_1]
                - [--infile2, t2_m1_infile_1]
                - [--value, parameter_2]

- name: dummy_task_3
  outputs:
    - parameter_6
  methods:
    - name: method_1
      inputs:
        - parameter_5
      implementations:
        - name: dummy_software
          input_map:
            - inputs:
                - parameter_5
              file: t3_m1_infile_1
          output_map:
            - files:
                - name: outfile.txt
                  save: true
              output: parameter_6                
          commands:
            - command: hpcflow dummy doSomething
              options:
                - [--infile1, t3_m1_infile_1]
                - [--infile2, t3_m1_infile_1]
                - [--value, parameter_5]

- name: dummy_task_4
  outputs:
    - parameter_8
  methods:
    - name: method_1
      inputs:
        - parameter_2[group=group_A]
        - parameter_6
        - parameter_7
        - parameter_9
      implementations:
        - name: dummy_software
          input_map:
            - inputs:
              - parameter_2
              - parameter_6
              - parameter_7
              - parameter_9
              file: t4_m1_infile_1
          output_map:
            - files:
                - name: outfile.txt
                  save: true
              output: parameter_8                
          commands:
            - command: hpcflow dummy doSomething
              options:
                - [--infile1, t4_m1_infile_1]
                - [--infile2, t4_m1_infile_1]

- name: dummy_task_5
  inputs:
    - parameter_8[alias=parameter_8_group]
    - parameter_10
  outputs:
    - parameter_11
  methods:
    - name: method_1
      implementations:
        - name: dummy_software
          input_map:
            - inputs:
              - parameter_8_group
              - parameter_10
              file: t5_m1_infile_1
          output_map:
            - files:
                - name: outfile.txt
                  save: true
              output: parameter_11
          commands:
            - command: hpcflow dummy doSomething
              options:
                - [--infile1, t5_m1_infile_1]
                - [--infile2, t5_m1_infile_1]

- name: dummy_task_6b
  inputs:
    - parameter_4[context=uniaxial,alias=parameter_4_uniaxial]
    - parameter_4[context=multiaxial,group=multiaxial,alias=parameter_4_multiaxial]
    - parameter_5
  outputs:
    - parameter_8
  methods:
    - name: method_1
      implementations:
        - name: dummy_software
          input_map:
            - inputs:
              - parameter_4_multiaxial
              - parameter_4_uniaxial
              - parameter_5
              file: t6b_m1_infile_1
          output_map:
            - files:
                - name: outfile.txt
                  save: true
              output: parameter_8
          commands:
            - command: hpcflow dummy doSomething
              options:
                - [--infile1, t6b_m1_infile_1]
                - [--infile2, t6b_m1_infile_1]
