matflow.cli.prepare_sources
Loading matflow config from /mnt/iusers01/jf01/mbdxqap3/.matflow/config.yml
Loading task schemas from 3 file(s)...OK!
Loading software definitions from 2 file(s)...OK!
Loading extensions...
  "neper"...(software: "neper") from matflow_neper (version 0.1.3)
  "mtex"...(software: "mtex") from matflow_mtex (version 0.1.10)
  "formable"...(software: "formable") from matflow_formable (version 0.1.14)
  "dream3d"...(software: "dream3d") from matflow_dream3d (version 0.1.1)
  "demo"...(software: "dummy_software") from matflow_demo_extension (version 0.1.3)
  "defdap"...(software: "defdap") from matflow_defdap (version 0.1.8)
  "damask"...(software: "damask") from matflow_damask (version 0.1.27)
  "abaqus"...(software: "abaqus") from matflow_abaqus (version 0.1.2)
  "cipher"...(software: "cipher") from matflow_cipher (version 0.1.0)
Validating task schemas against loaded extensions...OK! 64/66 schemas are valid.
The following schemas are invalid:
  ('generate_volume_element', 'particle_RVE', 'damask'): No function mapper function found. 
  ('visualise_volume_element_response', 'texture_odf_section', 'mtex'): No input map function found for input map that generates file "orientations.json". No input map function found for input map that generates file "options.json". 

all_ins: ['CSV_file_path', 'CSV_arguments', 'eng_stress_col_index', 'eng_strain_col_index', 'true_stress_col_index', 'true_strain_col_index', 'stress_units', 'plastic_range']
all_outs: ['tensile_test']
req_ins: ['eng_stress_col_index', 'eng_strain_col_index', 'true_stress_col_index', 'plastic_range', 'CSV_arguments', 'stress_units', 'CSV_file_path', 'true_strain_col_index']
req_ins_fmt: eng_stress_col_index, eng_strain_col_index, true_stress_col_index, plastic_range, CSV_arguments, stress_units, CSV_file_path, true_strain_col_index
out 1: 
----------
import sys
import hickle
from pathlib import Path
def main(eng_stress_col_index, eng_strain_col_index, true_stress_col_index, plastic_range, CSV_arguments, stress_units, CSV_file_path, true_strain_col_index):
    tensile_test = read_tensile_test_CSV(CSV_file_path, CSV_arguments, eng_stress_col_index, eng_strain_col_index, true_stress_col_index, true_strain_col_index, stress_units, plastic_range)

    return tensile_test
from formable.tensile_test import TensileTest
from formable.utils import read_non_uniform_csv




def read_tensile_test_CSV(CSV_file_path, CSV_arguments, eng_stress_col_index,
                          eng_strain_col_index, true_stress_col_index,
                          true_strain_col_index, stress_units, plastic_range):

    _, CSV_data = read_non_uniform_csv(
        CSV_file_path,
        delimiter=CSV_arguments.get('delimiter'),
        skip_rows=CSV_arguments.get('skip_rows'),
        header_row=CSV_arguments.get('header_row'),
    )

    eng_strain, eng_stress = None, None
    true_strain, true_stress = None, None

    if eng_strain_col_index is not None:
        eng_strain = CSV_data[:, eng_strain_col_index]
        eng_stress = CSV_data[:, eng_stress_col_index]
        stress = eng_stress

    elif true_strain_col_index is not None:
        true_strain = CSV_data[:, true_strain_col_index]
        true_stress = CSV_data[:, true_stress_col_index]
        stress = true_stress

    if stress_units.strip().upper() == 'MPA':
        stress *= 1e6
    elif stress_units.strip().upper() == 'GPA':
        stress *= 1e9

    tensile_test_obj = TensileTest(
        eng_stress=eng_stress,
        eng_strain=eng_strain,
        true_stress=true_stress,
        true_strain=true_strain,
        plastic_range=plastic_range,
    )

    tensile_test = tensile_test_obj.to_dict()

    return tensile_test

if __name__ == '__main__':        
    inputs = hickle.load(sys.argv[1])
    outputs = main(**inputs)
    hickle.dump(outputs, 'outputs.hdf5')


----------

out 2: 
----------
from formable.tensile_test import TensileTest
from formable.utils import read_non_uniform_csv
import sys
import hickle
from pathlib import Path


def main(eng_stress_col_index, eng_strain_col_index, true_stress_col_index, plastic_range, CSV_arguments, stress_units, CSV_file_path, true_strain_col_index):
    tensile_test = read_tensile_test_CSV(CSV_file_path, CSV_arguments, eng_stress_col_index,
                                         eng_strain_col_index, true_stress_col_index, true_strain_col_index, stress_units, plastic_range)

    return tensile_test


def read_tensile_test_CSV(CSV_file_path, CSV_arguments, eng_stress_col_index,
                          eng_strain_col_index, true_stress_col_index,
                          true_strain_col_index, stress_units, plastic_range):

    _, CSV_data = read_non_uniform_csv(
        CSV_file_path,
        delimiter=CSV_arguments.get('delimiter'),
        skip_rows=CSV_arguments.get('skip_rows'),
        header_row=CSV_arguments.get('header_row'),
    )

    eng_strain, eng_stress = None, None
    true_strain, true_stress = None, None

    if eng_strain_col_index is not None:
        eng_strain = CSV_data[:, eng_strain_col_index]
        eng_stress = CSV_data[:, eng_stress_col_index]
        stress = eng_stress

    elif true_strain_col_index is not None:
        true_strain = CSV_data[:, true_strain_col_index]
        true_stress = CSV_data[:, true_stress_col_index]
        stress = true_stress

    if stress_units.strip().upper() == 'MPA':
        stress *= 1e6
    elif stress_units.strip().upper() == 'GPA':
        stress *= 1e9

    tensile_test_obj = TensileTest(
        eng_stress=eng_stress,
        eng_strain=eng_strain,
        true_stress=true_stress,
        true_strain=true_strain,
        plastic_range=plastic_range,
    )

    tensile_test = tensile_test_obj.to_dict()

    return tensile_test


if __name__ == '__main__':
    inputs = hickle.load(sys.argv[1])
    outputs = main(**inputs)
    hickle.dump(outputs, 'outputs.hdf5')

----------

out 3: 
----------
from formable.tensile_test import TensileTest
from formable.utils import read_non_uniform_csv
import sys
import hickle
from pathlib import Path


def main(
    eng_stress_col_index,
    eng_strain_col_index,
    true_stress_col_index,
    plastic_range,
    CSV_arguments,
    stress_units,
    CSV_file_path,
    true_strain_col_index,
):
    tensile_test = read_tensile_test_CSV(
        CSV_file_path,
        CSV_arguments,
        eng_stress_col_index,
        eng_strain_col_index,
        true_stress_col_index,
        true_strain_col_index,
        stress_units,
        plastic_range,
    )

    return tensile_test


def read_tensile_test_CSV(
    CSV_file_path,
    CSV_arguments,
    eng_stress_col_index,
    eng_strain_col_index,
    true_stress_col_index,
    true_strain_col_index,
    stress_units,
    plastic_range,
):

    _, CSV_data = read_non_uniform_csv(
        CSV_file_path,
        delimiter=CSV_arguments.get("delimiter"),
        skip_rows=CSV_arguments.get("skip_rows"),
        header_row=CSV_arguments.get("header_row"),
    )

    eng_strain, eng_stress = None, None
    true_strain, true_stress = None, None

    if eng_strain_col_index is not None:
        eng_strain = CSV_data[:, eng_strain_col_index]
        eng_stress = CSV_data[:, eng_stress_col_index]
        stress = eng_stress

    elif true_strain_col_index is not None:
        true_strain = CSV_data[:, true_strain_col_index]
        true_stress = CSV_data[:, true_stress_col_index]
        stress = true_stress

    if stress_units.strip().upper() == "MPA":
        stress *= 1e6
    elif stress_units.strip().upper() == "GPA":
        stress *= 1e9

    tensile_test_obj = TensileTest(
        eng_stress=eng_stress,
        eng_strain=eng_strain,
        true_stress=true_stress,
        true_strain=true_strain,
        plastic_range=plastic_range,
    )

    tensile_test = tensile_test_obj.to_dict()

    return tensile_test


if __name__ == "__main__":
    inputs = hickle.load(sys.argv[1])
    outputs = main(**inputs)
    hickle.dump(outputs, "outputs.hdf5")

----------

